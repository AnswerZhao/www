{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Current version (Stable) Download Documentation Release Notes This is the current stable version of the project. Pre-release versions These are the latest changes that have yet to be released. Work In Progress Download Documentation Siddhi Source Code Distribution Source Code Past Versions","title":"Home"},{"location":"#current-version-stable","text":"Download Documentation Release Notes This is the current stable version of the project.","title":"Current version (Stable)"},{"location":"#pre-release-versions","text":"These are the latest changes that have yet to be released. Work In Progress Download Documentation Siddhi Source Code Distribution Source Code","title":"Pre-release versions"},{"location":"#past-versions","text":"","title":"Past Versions"},{"location":"license/","text":"Copyright (c) 2017 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2 . 0 , January 2004 http : // www . apache . org / licenses / TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 1 . Definitions . License shall mean the terms and conditions for use , reproduction , and distribution as defined by Sections 1 through 9 of this document . Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License . Legal Entity shall mean the union of the acting entity and all other entities that control , are controlled by , or are under common control with that entity . For the purposes of this definition , control means ( i ) the power , direct or indirect , to cause the direction or management of such entity , whether by contract or otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the outstanding shares , or ( iii ) beneficial ownership of such entity . You ( or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License . Source form shall mean the preferred form for making modifications , including but not limited to software source code , documentation source , and configuration files . Object form shall mean any form resulting from mechanical transformation or translation of a Source form , including but not limited to compiled object code , generated documentation , and conversions to other media types . Work shall mean the work of authorship , whether in Source or Object form , made available under the License , as indicated by a copyright notice that is included in or attached to the work ( an example is provided in the Appendix below ) . Derivative Works shall mean any work , whether in Source or Object form , that is based on ( or derived from ) the Work and for which the editorial revisions , annotations , elaborations , or other modifications represent , as a whole , an original work of authorship . For the purposes of this License , Derivative Works shall not include works that remain separable from , or merely link ( or bind by name ) to the interfaces of , the Work and Derivative Works thereof . Contribution shall mean any work of authorship , including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof , that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner . For the purposes of this definition , submitted means any form of electronic , verbal , or written communication sent to the Licensor or its representatives , including but not limited to communication on electronic mailing lists , source code control systems , and issue tracking systems that are managed by , or on behalf of , the Licensor for the purpose of discussing and improving the Work , but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work . 2 . Grant of Copyright License . Subject to the terms and conditions of this License , each Contributor hereby grants to You a perpetual , worldwide , non - exclusive , no - charge , royalty - free , irrevocable copyright license to reproduce , prepare Derivative Works of , publicly display , publicly perform , sublicense , and distribute the Work and such Derivative Works in Source or Object form . 3 . Grant of Patent License . Subject to the terms and conditions of this License , each Contributor hereby grants to You a perpetual , worldwide , non - exclusive , no - charge , royalty - free , irrevocable ( except as stated in this section ) patent license to make , have made , use , offer to sell , sell , import , and otherwise transfer the Work , where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution ( s ) alone or by combination of their Contribution ( s ) with the Work to which such Contribution ( s ) was submitted . If You institute patent litigation against any entity ( including a cross - claim or counterclaim in a lawsuit ) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement , then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed . 4 . Redistribution . You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium , with or without modifications , and in Source or Object form , provided that You meet the following conditions : ( a ) You must give any other recipients of the Work or Derivative Works a copy of this License ; and ( b ) You must cause any modified files to carry prominent notices stating that You changed the files ; and ( c ) You must retain , in the Source form of any Derivative Works that You distribute , all copyright , patent , trademark , and attribution notices from the Source form of the Work , excluding those notices that do not pertain to any part of the Derivative Works ; and ( d ) If the Work includes a NOTICE text file as part of its distribution , then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file , excluding those notices that do not pertain to any part of the Derivative Works , in at least one of the following places : within a NOTICE text file distributed as part of the Derivative Works ; within the Source form or documentation , if provided along with the Derivative Works ; or, within a display generated by the Derivative Works , if and wherever such third - party notices normally appear . The contents of the NOTICE file are for informational purposes only and do not modify the License . You may add Your own attribution notices within Derivative Works that You distribute , alongside or as an addendum to the NOTICE text from the Work , provided that such additional attribution notices cannot be construed as modifying the License . You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use , reproduction , or distribution of Your modifications , or for any such Derivative Works as a whole , provided Your use , reproduction , and distribution of the Work otherwise complies with the conditions stated in this License . 5 . Submission of Contributions . Unless You explicitly state otherwise , any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License , without any additional terms or conditions . Notwithstanding the above , nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions . 6 . Trademarks . This License does not grant permission to use the trade names , trademarks , service marks , or product names of the Licensor , except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file . 7 . Disclaimer of Warranty . Unless required by applicable law or agreed to in writing , Licensor provides the Work ( and each Contributor provides its Contributions ) on an AS IS BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied , including , without limitation , any warranties or conditions of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A PARTICULAR PURPOSE . You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License . 8 . Limitation of Liability . In no event and under no legal theory , whether in tort ( including negligence ) , contract , or otherwise , unless required by applicable law ( such as deliberate and grossly negligent acts ) or agreed to in writing , shall any Contributor be liable to You for damages , including any direct , indirect , special , incidental , or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work ( including but not limited to damages for loss of goodwill , work stoppage , computer failure or malfunction , or any and all other commercial damages or losses ) , even if such Contributor has been advised of the possibility of such damages . 9 . Accepting Warranty or Additional Liability . While redistributing the Work or Derivative Works thereof , You may choose to offer , and charge a fee for , acceptance of support , warranty , indemnity , or other liability obligations and / or rights consistent with this License . However , in accepting such obligations , You may act only on Your own behalf and on Your sole responsibility , not on behalf of any other Contributor , and only if You agree to indemnify , defend , and hold each Contributor harmless for any liability incurred by , or claims asserted against , such Contributor by reason of your accepting any such warranty or additional liability . END OF TERMS AND CONDITIONS","title":"License"},{"location":"docs/examples/basic-types/","text":"var base_url = \"\"; Basic Types Provides introduction to basic Siddhi attribute types which are int , long , float , double , string , and object , and some key functions such as convert() , instanceOf...() , and cast() . In Siddhi, other types such as list, map, etc, should be passed as object into streams. For more information on other types refer other examples under Values and Types section. For information values , and other useful functions , refer the Siddhi query guide . define stream PatientRegistrationInputStream ( seqNo long , name string , age int , height float , weight double , photo object , isEmployee bool , wardNo object ); define stream PatientRegistrationStream ( seqNo long , name string , age int , height double , weight double , photo object , isPhotoString bool , isEmployee bool , wardNo int ); @ info ( name = Type - processor ) from PatientRegistrationInputStream select seqNo , name , age , convert ( height , double ) as height , weight , photo , instanceOfString ( photo ) as isPhotoString , isEmployee , cast ( wardNo , int ) as wardNo insert into PatientRegistrationStream ; define stream PatientRegistrationInputStream ( seqNo long, name string, age int, height float, weight double, photo object, isEmployee bool, wardNo object); Defines PatientRegistrationInputStream having information in all primitive types. define stream PatientRegistrationStream ( seqNo long, name string, age int, height double, weight double, photo object, isPhotoString bool, isEmployee bool, wardNo int); Defines the resulting PatientRegistrationStream after processing. @info(name = Type-processor ) from PatientRegistrationInputStream select seqNo, name, age, convert(height, double ) as height, convert() used to convert float type to double . weight, photo, instanceOfString(photo) as isPhotoString, instanceOfString() checks if the photo is an instance of string . isEmployee, cast(wardNo, int ) as wardNo cast() cast the value of wardNo to int . insert into PatientRegistrationStream; Input Below event is sent to PatientRegistrationInputStream , [ 1200098 , 'Peter Johnson' , 34 , 194.3f , 69.6 , #Fjoiu59%3hkjnknk$#nFT , true , 34 ] Here, assume that the content of the photo ( #Fjoiu59%3hkjnknk$#nFT ) is binary. Output After processing, the event arriving at PatientRegistrationStream will be as follows: [ 1200098 , 'Peter Johnson' , 34 , 194.3 , 69.6 , #Fjoiu59%3hkjnknk$#nFT , false , true , 34 ]","title":"Basic types"},{"location":"docs/examples/default/","text":"var base_url = \"\"; Default This application demonstrates how to use default function to process attributes with null values define stream PatientRegistrationInputStream ( seqNo long , name string , age int , height float , weight double , photo object , isEmployee bool , wardNo object ); @ info ( name = SimpleIfElseQuery ) from PatientRegistrationInputStream select default ( name , invalid ) as name , default ( seqNo , 0 l ) as seqNo , default ( weight , 0 d ) as weight , default ( age , 0 ) as age , default ( height , 0 f ) as height insert into PreprocessedPatientRegistrationInputStream ; define stream PatientRegistrationInputStream ( seqNo long, name string, age int, height float, weight double, photo object, isEmployee bool, wardNo object); Defines PatientRegistrationInputStream having information in all primitive types. @info(name = SimpleIfElseQuery ) from PatientRegistrationInputStream select default(name, invalid ) as name, Default value of invalid to be used if name is null default(seqNo, 0l) as seqNo, Default value of 0l to be used if seqNo is null default(weight, 0d) as weight, Default value of 0d to be used if weight is null default(age, 0) as age, Default value of 0 to be used if age is null default(height, 0f) as height Default value of 0f to be used if height is null insert into PreprocessedPatientRegistrationInputStream; Input An event of all null attributes is sent to PatientRegistrationInputStream , Output After processing, the event arriving at PreprocessedPatientRegistrationInputStream will be as follows, [ 'invalid' , 0 0.0 , 0 , 0.0 ] with types, [ string , long , double , int , float ]","title":"Default"},{"location":"docs/examples/if-then-else/","text":"var base_url = \"\"; If-Then-Else This application demonstrates how to enrich events based on a simple if-then-else conditions. define stream TemperatureStream ( sensorId string , temperature double ); @ info ( name = SimpleIfElseQuery ) from TemperatureStream select sensorId , ifThenElse ( temperature - 2 , Valid , InValid ) as isValid insert into ValidTemperatureStream ; @ info ( name = ComplexIfElseQuery ) from TemperatureStream select sensorId , ifThenElse ( temperature - 2 , ifThenElse ( temperature 40 , High , Normal ), InValid ) as tempStatus insert into ProcessedTemperatureStream ; define stream TemperatureStream (sensorId string, temperature double); Defines TemperatureStream stream to process events having sensorId and temperature (F). @info(name = SimpleIfElseQuery ) from TemperatureStream select sensorId, ifThenElse(temperature -2, Valid , InValid ) as isValid if temperature -2, isValid will be true else false insert into ValidTemperatureStream; @info(name = ComplexIfElseQuery ) from TemperatureStream select sensorId, ifThenElse(temperature -2, ifThenElse(temperature 40, High , Normal ), InValid ) as tempStatus If the temperature 40 the status is set to High , between -2 and 40 as Normal less than -2 as InValid insert into ProcessedTemperatureStream; Events at each stream When an event with values [ 'sensor1' , 35.4 ] is sent to TemperatureStream stream it will get converted and travel through the streams as below. ValidTemperatureStream : [ 'sensor1' , 'Valid' ] ProcessedTemperatureStream : [ 'sensor1' , 'Normal' ]","title":"If then else"},{"location":"docs/examples/list/","text":"var base_url = \"\"; List Provides examples on basic list functions provided via siddhi-execution-list extension. For information of performing scatter and gather using list:tokenize() , and list:collect() refer the examples in Data Pipelining section. For information on all list functions , refer the Siddhi APIs . define stream ProductComboStream ( product1 string , product2 string , product3 string ); @ info ( name = Create - list ) from ProductComboStream select list : create ( product1 , product2 , product3 ) as productList insert into NewListStream ; @ info ( name = Check - list ) from NewListStream select list : isList ( productList ) as isList , list : contains ( productList , Cake ) as isCakePresent , list : isEmpty ( productList ) as isEmpty , list : get ( productList , 1 ) as valueAt1 , list : size ( productList ) as size insert into ListAnalysisStream ; @ info ( name = Clone - and - update ) from NewListStream select list : remove ( list : add ( list : clone ( productList ), Toffee ), Cake ) as productList insert into UpdatedListStream ; define stream ProductComboStream ( product1 string, product2 string, product3 string); Defines ProductComboStream having string type attributes product1 , product2 , and product3 . @info(name = Create-list ) from ProductComboStream select list:create(product1, product2, product3) as productList Create a list with values of product1 , product2 , and product3 . insert into NewListStream; @info(name = Check-list ) from NewListStream select list:isList(productList) as isList, Check if productList is a List. list:contains(productList, Cake ) as isCakePresent, Check if productList contains 'Cake' . list:isEmpty(productList) as isEmpty, Check if productList is empty. list:get(productList, 1) as valueAt1, Get the value at index 1 from productList . list:size(productList) as size Get size of productList . insert into ListAnalysisStream; @info(name = Clone-and-update ) from NewListStream select list:remove( list:add(list:clone(productList), Toffee ), Cake ) as productList Clone productList , add Toffee to the end of the list, and remove Cake from the list. insert into UpdatedListStream; Input Below event is sent to ProductComboStream , [ 'Ice Cream' , 'Chocolate' , 'Cake' ] Output After processing, the following events will be arriving at each stream: NewListStream: [ [Ice Cream, Chocolate, Cake] ] ListAnalysisStream: [ true , true , false , Chocolate , 3 ] UpdatedListStream: [ [Ice Cream, Chocolate, Toffee] ]","title":"List"},{"location":"docs/examples/map/","text":"var base_url = \"\"; Map Provides examples on basic map functions provided via siddhi-execution-map extension. For information of performing scatter and gather using map:tokenize() , and map:collect() refer the examples in Data Pipelining section. For information on all map functions , refer the Siddhi APIs . define stream CoupleDealInfoStream ( item1 string , price1 double , item2 string , price2 double ); @ info ( name = Create - map ) from CoupleDealInfoStream select map : create ( item1 , price1 , item2 , price2 ) as itemPriceMap insert into NewMapStream ; @ info ( name = Check - map ) from NewMapStream select map : isMap ( itemPriceMap ) as isMap , map : containsKey ( itemPriceMap , Cookie ) as isCookiePresent , map : containsValue ( itemPriceMap , 24.0 ) as isThereItemWithPrice24 , map : isEmpty ( itemPriceMap ) as isEmpty , map : keys ( itemPriceMap ) as keys , map : size ( itemPriceMap ) as size insert into MapAnalysisStream ; @ info ( name = Clone - and - update ) from NewMapStream select map : replace ( map : put ( map : clone ( itemPriceMap ), Gift , 1.0 ), Cake , 12.0 ) as itemPriceMap insert into ItemInsertedMapStream ; define stream CoupleDealInfoStream ( item1 string, price1 double, item2 string, price2 double); Defines CoupleDealInfoStream having attributes item1 , price1 , item2 , and price2 with string and double types. @info(name = Create-map ) from CoupleDealInfoStream select map:create(item1, price1, item2, price2) as itemPriceMap Create a map with values of item1 and item2 as keys, and price1 and price2 as values. insert into NewMapStream; @info(name = Check-map ) from NewMapStream select map:isMap(itemPriceMap) as isMap, Check if itemPriceMap is a Map. map:containsKey(itemPriceMap, Cookie ) as isCookiePresent, Check if itemPriceMap contains a key 'Cookie' . map:containsValue(itemPriceMap, 24.0) as isThereItemWithPrice24, Check if itemPriceMap contains a value 24.0 . map:isEmpty(itemPriceMap) as isEmpty, Check if itemPriceMap is empty. map:keys(itemPriceMap) as keys, Get all keys of itemPriceMap as a List. map:size(itemPriceMap) as size Get size of itemPriceMap . insert into MapAnalysisStream; @info(name = Clone-and-update ) from NewMapStream select map:replace( map:put(map:clone(itemPriceMap), Gift , 1.0), Cake , 12.0) as itemPriceMap Clone itemPriceMap , put Gift key with value 1.0 to it, and replace Cake key with value 12.0 . insert into ItemInsertedMapStream; Input Below event is sent to CoupleDealInfoStream , [ 'Chocolate' , 18.0 , 'Ice Cream' , 24.0 ] Output After processing, the following events will be arriving at each stream: NewMapStream: [ {Ice Cream=24.0, Chocolate =18.0} ] MapAnalysisStream: [ true , false , true , false , [Ice Cream, Chocolate] , 2 ] ItemInsertedMapStream: [ {Ice Cream=24.0, Gift=1.0, Chocolate =18.0} ]","title":"Map"},{"location":"docs/examples/null/","text":"var base_url = \"\"; Null Provides examples on using nulls in Siddhi Apps. For more information refer Siddhi query guide . define stream ProductInputStream ( item string , price double ); define Table ProductInfoTable ( item string , discount double ); @ info ( name = Check - for - null ) from ProductInputStream [ not ( item is null )] select item , price is null as isPriceNull insert into ProductValidationStream ; @ info ( name = Outer - join - with - table ) from ProductInputStream as s left outer join ProductInfoTable as t on s . item == t . item select s . item , s . price , t . discount , math : power ( t . discount , 2 ) is null as isFunctionReturnsNull , t is null as isTNull , s is null as isSNull , t . discount is null as isTDiscountNull , s . item is null as isSItemNull insert into DiscountValidationStream ; define stream ProductInputStream (item string, price double); define Table ProductInfoTable (item string, discount double); Empty ProductInfoTable with attributes item and discount . @info(name = Check-for-null ) from ProductInputStream [not(item is null)] Filter events with item not having null value. select item, price is null as isPriceNull Checks if price contains null value. insert into ProductValidationStream; @info(name = Outer-join-with-table ) from ProductInputStream as s left outer join ProductInfoTable as t on s.item == t.item select s.item, s.price, t.discount, math:power(t.discount, 2) is null as isFunctionReturnsNull, Check if math:power() returns null . t is null as isTNull, s is null as isSNull, Check if streams t and s are null . t.discount is null as isTDiscountNull, s.item is null as isSItemNull Check if streams attributes t.discount and s.item are null . insert into DiscountValidationStream; Input Below event is sent to ProductInputStream , [ 'Cake' , 12.0 ] Output After processing, the following events will be arriving at each stream: ProductValidationStream: [ Cake , false ] DiscountValidationStream: [ Cake , 12.0 , null , true , true , false , true , false ]","title":"Null"},{"location":"docs/examples/regex-matching/","text":"var base_url = \"\"; Regex Matching This demonstrates event cleansing using regex expressions. Regex operations can be performed using Siddhi Execution Regex extension. define stream SweetProductionStream ( name string , amount int ); @ info ( name = ProcessSweetProductionStream ) from SweetProductionStream select name , regex : matches ( chocolate (. * ) , name ) as isAChocolateProduct , regex : group ( . * \\ s (. * ) , name , 1 ) as sweetType insert into ChocolateProductStream ; define stream SweetProductionStream (name string, amount int); Defines SweetProductionStream having information of name and amount @info(name= ProcessSweetProductionStream ) from SweetProductionStream select name, regex:matches( chocolate(.*) , name) as isAChocolateProduct, Matches if name begins with the word chocolate regex:group( .*\\s(.*) , name, 1) as sweetType Captures the sweetType of the sweet following the flavour in name insert into ChocolateProductStream; Input Below event is sent to SweetProductionStream , [ 'chocolate cake' , 34 ] Output After processing, the event arriving at ChocolateProductStream will be as follows: [ 'chocolate cake' , true , 'cake' ]","title":"Regex matching"},{"location":"docs/examples/siddhiapp/","text":"var base_url = \"\"; Siddhi Application Provides introduction to the concept of Siddhi Application . Siddhi App provides an isolated execution environment for processing the execution logic. It can be deployed and processed independently of other SiddhiApps in the system. Siddhi Apps can use inMemory sources and sinks to communicate between each other. @app:name( Temperature - Processor ) @app:description( App for processing temperature data . ) @ source ( type = inMemory , topic = SensorDetail ) define stream TemperatureStream ( sensorId string , temperature double ); @ sink ( type = inMemory , topic = Temperature ) define stream TemperatureOnlyStream ( temperature double ); @ info ( name = Simple - selection ) from TemperatureStream select temperature insert into TemperatureOnlyStream ; @app:name( Temperature-Processor ) Name of the Siddhi Application @app:description( App for processing temperature data. ) Optional description for Siddhi Application @source(type= inMemory , topic= SensorDetail ) define stream TemperatureStream ( sensorId string, temperature double); InMemory source to consume events from other Siddhi Apps. @sink(type= inMemory , topic= Temperature ) define stream TemperatureOnlyStream (temperature double); InMemory sink to publish events from other Siddhi Apps. @info(name = Simple-selection ) from TemperatureStream select temperature insert into TemperatureOnlyStream; Input When an event [ 'aq-14' , 35.4 ] is pushed via the SensorDetail topic of the inMemory transport from another Siddhi App, the event will be consumed and mapped to the TemperatureStream stream. Output After processing, the event [ 35.4 ] arriving at TemperatureOnlyStream will be emitted via Temperature topic of the inMemory transport to other subscribed Siddhi Apps.","title":"Siddhiapp"},{"location":"docs/examples/simple-aggregation/","text":"var base_url = \"\"; Simple Aggregation This application demonstrates how to simulate random events via Feed Simulation and calculate running aggregates such as avg, min, max, etc. The aggregation is executed on events within a time window. A sliding time window of 10 seconds is used in this sample. define stream TradesStream ( trader string , quantity int ); @ sink ( type = log ) define stream SummarizedTradingInformation ( trader string , noOfTrades long , totalTradingQuantity long , minTradingQuantity int , maxTradingQuantity int , avgTradingQuantity double ); @ info ( name = query1 ) from TradesStream # window . time ( 10 sec ) select trader , count () as noOfTrades , sum ( quantity ) as totalTradingQuantity , min ( quantity ) as minTradingQuantity , max ( quantity ) as maxTradingQuantity , avg ( quantity ) as avgTradingQuantity group by trader insert into SummarizedTradingInformation ; define stream TradesStream(trader string, quantity int); Define the input stream definition called TradesStream @sink(type= log ) define stream SummarizedTradingInformation(trader string, noOfTrades long, totalTradingQuantity long, minTradingQuantity int, maxTradingQuantity int, avgTradingQuantity double); Define the sink to print the output events in the log file @info(name= query1 ) from TradesStream#window.time(10 sec) select trader, count() as noOfTrades, sum(quantity) as totalTradingQuantity, min(quantity) as minTradingQuantity, max(quantity) as maxTradingQuantity, avg(quantity) as avgTradingQuantity group by trader insert into SummarizedTradingInformation; Find count, sum, min, max and avg of quantity per trader, during the last 10 seconds Input Find count, sum, min, max and avg of quantity per trader, during the last 10 seconds Output Find count, sum, min, max and avg of quantity per trader, during the last 10 seconds","title":"Simple aggregation"},{"location":"docs/examples/source-and-sink/","text":"var base_url = \"\"; Source and Sink Provides introduction to sources and sink that are used to consume and publish events to external systems. There are multiple source and sink types, but this example only explains http source, log sink, and kafka sink. For more info refer the Siddhi query guide . @ source ( type = http , receiver . url = http : //0.0.0.0:8006/temp , @ map ( type = json )) define stream TemperatureStream ( sensorId string , temperature double ); @ sink ( type = log ) @ sink ( type = kafka , topic = temperature , bootstrap . servers = localhost : 9092 , @ map ( type = json , @payload( { temp : {{ temperature }} } ))) define stream TemperatureOnlyStream ( temperature double ); @ info ( name = Simple - selection ) from TemperatureStream select temperature insert into TemperatureOnlyStream ; @source(type= http , receiver.url= http://0.0.0.0:8006/temp , @map(type= json )) HTTP source to consume JSON messages with default mapping via url http://0.0.0.0:8006/temp . define stream TemperatureStream ( sensorId string, temperature double); Defines TemperatureStream stream having sensorId and temperature attributes of types string and double . @sink(type= log ) Log sink to log Siddhi events arriving via TemperatureOnlyStream stream. @sink(type= kafka , topic= temperature , bootstrap.servers= localhost:9092 , @map(type= json , @payload( { temp : {{temperature}} } ))) Kafka sink to map events arriving via TemperatureOnlyStream stream as custom JSON events, and publish to temperature topic. define stream TemperatureOnlyStream (temperature double); Defines TemperatureOnlyStream stream having temperature attribute of type double . @info(name = Simple-selection ) from TemperatureStream select temperature insert into TemperatureOnlyStream; Input When a JSON message in the following default message format is sent to url http://0.0.0.0:8006/temp with content type application/json . It will automatically get mapped to an event in the TemperatureStream stream. { event :{ sensorId : aq-14 , temperature :35.4 } } To process custom input messages, please refer the examples related to Input Data Mapping. Output After processing, the event arriving at TemperatureOnlyStream will be emitted via log and kafka sinks. As log sink uses passThrough mapper by default, it directly logs the Siddhi Events to the console as following; Event{timestamp=1574515771712, data=[35.4], isExpired=false} The kafka sink maps the event to a custom JSON message as below and publishes it to the temperature topic. { temp : 35.4 } To output messages using other message formats, pleases refer the examples related to Output Data Mapping.","title":"Source and sink"},{"location":"docs/examples/stream-and-query/","text":"var base_url = \"\"; Stream and Query Provides introduction to streams , queries , and how queries can be chained to one another. There are multiple type of queries such as window query, join query, pattern query, etc. But this example only explains how pass-through and selection queries work. For more info refer the Siddhi query guide . define stream InputTemperatureStream ( sensorId string , temperature double ); @ info ( name = Pass - through ) from InputTemperatureStream select * insert into TemperatureAndSensorStream ; @ info ( name = Simple - selection ) from TemperatureAndSensorStream select temperature insert into TemperatureOnlyStream ; define stream InputTemperatureStream ( sensorId string, temperature double); Defines InputTemperatureStream stream to pass events having sensorId and temperature attributes of types string and double . @info(name = Pass-through ) Optional @info annotation to name the query. from InputTemperatureStream select * insert into TemperatureAndSensorStream; Query to consume events from InputTemperatureStream , produce new events by selecting all the attributes from the incoming events, and outputs them to TemperatureStream . @info(name = Simple-selection ) from TemperatureAndSensorStream Consumes events from TemperatureAndSensorStream . The schema of the stream is inferred from the previous query, hence no need to be defined. select temperature insert into TemperatureOnlyStream; Selects only the temperature attribute from events, and outputs to TemperatureOnlyStream . Events at each stream When an event with values [ 'aq-14' , 35.4 ] is sent to InputTemperatureStream stream it will get converted and travel through the streams as below. InputTemperatureStream : [ 'aq-14' , 35.4 ] TemperatureAndSensorStream : [ 'aq-14' , 35.4 ] TemperatureOnlyStream : [ 35.4 ]","title":"Stream and query"},{"location":"docs/examples/table-and-store/","text":"var base_url = \"\"; Table and Store Provides introduction to in-memory tables and database backed stores that can be used to store events. For information on various types of stores, primary keys, indexes, and caching, refer examples related to Event Store Integration and Siddhi query guide . define stream TemperatureStream ( sensorId string , temperature double ); define table TemperatureLogTable ( sensorId string , roomNo string , temperature double ); @ store ( type = rdbms , jdbc . url = jdbc:mysql://localhost:3306/sid , username = root , password = root , jdbc . driver . name = com.mysql.jdbc.Driver ) define table SensorIdInfoTable ( sensorId string , roomNo string ); @ info ( name = Join - query ) from TemperatureStream as t join SensorIdInfoTable as s on t . sensorId == s . sensorId select t . sensorId as sensorId , s . roomNo as roomNo t . temperature as temperature insert into TemperatureLogTable ; define stream TemperatureStream ( sensorId string, temperature double); Defines TemperatureStream stream having sensorId and temperature attributes of types string and double . define table TemperatureLogTable ( sensorId string, roomNo string, temperature double); Defines in-memory TemperatureLogTable having sensorId , roomNo , and temperature attributes of types string , string , and double . @store(type= rdbms , jdbc.url= jdbc:mysql://localhost:3306/sid , username= root , password= root , jdbc.driver.name= com.mysql.jdbc.Driver ) Store annotation to back SensorIdInfoTable by a MySQL RDBMS with sid DB and SensorIdInfoTable table. define table SensorIdInfoTable ( sensorId string, roomNo string); Defines SensorIdInfoTable table. @info(name = Join-query ) from TemperatureStream as t join SensorIdInfoTable as s on t.sensorId == s.sensorId TemperatureStream with alias t joins with SensorIdInfoTable with alias s based on sensorId . select t.sensorId as sensorId, s.roomNo as roomNo t.temperature as temperature insert into TemperatureLogTable; Selects sensorId , roomNo , and temperature attributes from stream and table, and adds events to TemperatureLogTable . Event at table and store When SensorIdInfoTable table contains a recode [ 'aq-14' , '789' ], and when an event with values [ 'aq-14' , 35.4 ] is sent to TemperatureStream stream. The event will get converted and added to the TemperatureLogTable table as below. [ 'aq-14' , '789' , 35.4 ] Retrieving values from tables and stores The stored values can be retrieved by join tables and stores with the streams as in the Join-query depicted in the example, or using on-demand queries. The data in TemperatureDetailsTable can be retrieved via on-demand queries as below, using the On Demand Query REST API or by calling query() method of SiddhiAppRuntime . from TemperatureDetailsTable select *","title":"Table and store"},{"location":"docs/examples/type-based-filtering/","text":"var base_url = \"\"; Type based Filtering This application demonstrates filter out events based on data type of the attribute define stream SweetProductionStream ( name string , amount int ); @ info ( name = ProcessSweetProductionStream ) from SweetProductionStream select instanceOfInteger ( amount ) as isAIntInstance , name , amount insert into ProcessedSweetProductionStream ; define stream SweetProductionStream (name string, amount int); Defines SweetProductionStream having information of name and amount @info(name= ProcessSweetProductionStream ) from SweetProductionStream select instanceOfInteger(amount) as isAIntInstance, true if amount is of int type name, amount insert into ProcessedSweetProductionStream; Input Below event is sent to SweetProductionStream , [ 'chocolate cake' , 'invalid' ] Output After processing, the event arriving at ProcessedSweetProductionStream will be as follows: [ false , 'chocolate cake' , 'invalid' ]","title":"Type based filtering"},{"location":"docs/examples/value-based-filtering/","text":"var base_url = \"\"; Value based Filtering This application demonstrates filter out events based on simple conditions such as number value, range or null type. define stream TemperatureStream ( sensorId string , temperature double ); @ info ( name = EqualsFilter ) from TemperatureStream [ sensorId == A1234 ] select * insert into SenorA1234TemperatureStream ; @ info ( name = RangeFilter ) from TemperatureStream [ temperature - 2 and temperature 40 ] select * insert into NormalTemperatureStream ; @ info ( name = NullFilter ) from TemperatureStream [ sensorId is null ] select * insert into InValidTemperatureStream ; define stream TemperatureStream ( sensorId string, temperature double); Defines TemperatureStream stream to process events having sensorId and temperature (F). @info(name = EqualsFilter ) from TemperatureStream[ sensorId == A1234 ] Filter out events with sensorId equalling A1234 select * insert into SenorA1234TemperatureStream; @info(name = RangeFilter ) from TemperatureStream[ temperature -2 and temperature 40] Filter out events where -2 temperature 40 select * insert into NormalTemperatureStream; @info(name = NullFilter ) from TemperatureStream[ sensorId is null ] Filter out events with SensorId being null select * insert into InValidTemperatureStream; Input Below events are sent to TemperatureStream , [ 'A1234' , 39] [ 'sensor1' , 35] [ null , 43] Output After processing, the following events will be arriving at each stream: SenorA1234TemperatureStream: [ 'A1234' , 39] only NormalTemperatureStream: [ 'sensor1' , 35] only InValidTemperatureStream: [ null , 43] only","title":"Value based filtering"}]}